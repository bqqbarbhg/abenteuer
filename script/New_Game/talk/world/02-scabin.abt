
Scabin.Basement.Head {

	subgame.init "Scabin.Basement.Head" () -> {
		active-state *Q-1
		active-actor "ai"
	}

	subgame.init "Scabin.Basement.Head" () {
		shared-flag *Head-Reset
	} -> {
		! shared-flag *Head-Reset
		! flag *Offended
		! flag *Happy
		! flag *Remembers-Unlocked-Door
		println: "**ai**: Loading memory banks (last saved 5 days ago)"
	} 2

	define is-offended () {
		! shared-flag *Head-Reset
		flag *Offended
	}

	subgame.init "Scabin.Basement.Head" () {
		is-offended
	} -> {
		! active-state _
		active-state *Still-Fail
		println: ""
		println: "**ai**: Why must you waste my time?"
	} 2

	subgame.init "Scabin.Basement.Head" () {
		! is-offended
		! flag Happy
	} -> {
		println: ""
		println: "**ai**: You must prove your worth to me."
		println: "**ai**: Who was cloned to build me?"
	} 2

	subgame.init "Scabin.Basement.Head" () {
		! shared-flag *Head-Reset
		flag *Happy
	} -> {
		! active-state _
		active-state *Talking
		println: ""
		println: "**ai**: I remember you, you're alright."
	} 3

	define Offend () -> {
		! flag *Offended
		flag *Offended
		! active-state _
		active-state *Fail
	}

	entity Offended
	entity Happy
	entity Remembers-Unlocked-Door

	entity Q-1
	entity Q-2
	entity Q-3
	entity Talking
	entity Fail
	entity Still-Fail

	entity Retry {
		reply Fail
		name "Can I try again?"
		line "Of course not! I will never forget this."
		end-talk
	}

	entity Still-Retry {
		reply Still-Fail
		name "Are you seriously still mad at me?"
		line "As I said, I will never forget how insultingly wrong your answer was."
		end-talk
	}

	entity A-1-1 {
		name "Dennis Ritchie"
		reply Q-1
		line "Fool! Do I look like I'm leaking memory."
		line "Of course the right answer is **Brendan Eich**"
		on-say Offend
	}

	entity A-1-2 {
		name "Guido van Rossum"
		reply Q-1
		line "Wrong! After hundreds of years people still haven't moved on from Python 2.7"
		line "Of course the right answer is **Brendan Eich**"
		on-say Offend
	}

	entity A-1-3 {
		name "Brendan Eich"
		reply Q-1
		line "Yes! We live in the Javascript age so he was our best bet."
		line "How, about what's the hottest Javascript tecvhnology around now?"
		goto Q-2
	}

	entity A-1-4 {
		name "Bjarne Stroustrup"
		reply Q-1
		line "Wrong! After the C++ spec itself became turing-complete nobody dared to touch it."
		line "Of course the right answer is **Brendan Eich**"
		on-say Offend
	}

	entity A-1-5 {
		name "Larry Wall"
		reply Q-1
		line "Noooope! They tried, but it quickly became a mess."
		line "Of course the right answer is **Brendan Eich**"
		on-say Offend
	}

	entity A-2-1 {
		name "React"
		reply Q-2
		line "Hah, that thing is older than me!"
		line "Of course the right answer is **YogurtScript**"
		on-say Offend
	}

	entity A-2-2 {
		name "ht.js"
		reply Q-2
		line "Yeah sure, everybody loves to call invalidate() manually..."
		line "Of course the right answer is **YogurtScript**"
		on-say Offend
	}

	entity A-2-3 {
		name "Angular 18.3"
		reply Q-2
		line "Not even close!"
		line "Of course the right answer is **YogurtScript**"
		on-say Offend
	}

	entity A-2-4 {
		name "Unityreal.js"
		reply Q-2
		line "Bah, maybe for video games or something."
		line "Of course the right answer is **YogurtScript**"
		on-say Offend
	}

	entity A-2-5 {
		name "YogurtScript"
		reply Q-2
		line "Yes, everything's transpiled from YogurtScript nowadays!"
		line "Finally, what number am I thinking about?"
		goto Q-3
	}


	entity A-3-1 {
		reply Q-3
		name "1"
		line "Wrong!"
		line "Of course the right answer is **2**"
		on-say Offend
	}

	entity A-3-2 {
		reply Q-3
		name "2"
		line "Yes!"
		line "I guess you're alright then, what do you want?"
		on-say () -> {
			! flag *Happy
			flag *Happy
		}
		goto Talking
	}

	entity A-3-3 {
		reply Q-3
		name "65535"
		line "Wrong!"
		line "Of course the right answer is **2**"
		on-say Offend
	}

	entity A-3-4 {
		reply Q-3
		name "23"
		line "Wrong!"
		line "Of course the right answer is **2**"
		on-say Offend
	}

	entity A-3-5 {
		reply Q-3
		name "-18"
		line "Wrong!"
		line "Of course the right answer is **2**"
		on-say Offend
	}

	entity Remove-Door-Lock {
		reply Talking
		name "Can you unlock the door upstairs?"

		requires (Line) {
			! shared-flag *Door-Unlocked
		}

		on-say () {
			! shared-flag *Door-Unlocked
		} -> {
			println: "**ai**: Sure"
			shared-flag *Door-Unlocked
			! flag *Remembers-Unlocked-Door
			flag *Remembers-Unlocked-Door
		}
	}

	entity Tf-Password {
		reply Talking
		name "What is the password to TF?"
		line "It's \"We demand to be taken seriously\"."

		requires (Line) {
			! shared-flag *Tf.Building.Know-Password
		}

		on-say () {
			! shared-flag *Tf.Building.Know-Password
		}-> {
			shared-flag *Tf.Building.Know-Password
		}
	}

}

